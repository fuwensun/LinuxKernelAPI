注意：
1，
fun() 要写成 fun(void)

2,
$ grep -r KERN_SOH /usr/src/linux-headers-4.15.0-22

新版
#define KERN_SOH	"\001"		/* ASCII Start Of Header */
#define KERN_SOH_ASCII	'\001'
#define KERN_EMERG	KERN_SOH "0"	/* system is unusable */
#define KERN_ALERT	KERN_SOH "1"	/* action must be taken immediately */
#define KERN_CRIT	KERN_SOH "2"	/* critical conditions */
#define KERN_ERR	KERN_SOH "3"	/* error conditions */
#define KERN_WARNING	KERN_SOH "4"	/* warning conditions */
#define KERN_NOTICE	KERN_SOH "5"	/* normal but significant condition */
#define KERN_INFO	KERN_SOH "6"	/* informational */
#define KERN_DEBUG	KERN_SOH "7"	/* debug-level messages */
#define KERN_DEFAULT	KERN_SOH "d"	/* the default kernel loglevel */


旧版
#define KERN_EMERG   "<0>"   /* system is unusable */
#define KERN_ALERT   "<1>"   /* action must be taken immediately */

3,
申明和编码要分开
//warning!
ISO C90 forbids mixed declarations and code [-Wdeclaration-after-statement]
     struct module *fmodule = find_module(name);
//ok!
struct module *fmodule = 0;
fmodule = find_module(name);

4,
内核符号的导出，以变量、函数为最小单位。
GPL模块可以导出“非”GPL符号（使用它的模块不会被传染GPL）。
GPL模块可以导出GPL符号（使用它的模块会被传染GPL）。
EXPORT_SYMBOL(symbol_A);
EXPORT_SYMBOL_GPL(symbol_A_GPL);
EXPORT_SYMBOL_GPL_FUTURE(symbol_A_GPL_FUTURE);

5,
struct pid 进程描述符
pid_t	   进程号

6，内核线程创建
cmm_thread_ptr = kthread_run(cmm_thread, NULL, "cmmthread");
if (!IS_ERR(cmm_thread_ptr))
	return 0;


6,
pid_t <–> struct pid *
----------------------------------
pid_t pid_vnr(struct pid *pid)
struct pid *find_pid_ns(int nr, struct pid_namespace *ns);
struct pid *find_vpid(int nr)
struct pid *find_get_pid(int nr)

struct pid * –> struct task_struct *
----------------------------------
struct pid *get_task_pid(sturct task_struct *task, enum pid_type);
struct task_struct *pid_task(struct pid *pid, enum pid_type);
struct task_struct *get_pid_task(struct pid *pid, enum pid_type)


7,
pid_t pid_nr(struct pid *pid)	//获取全局进程号
pid_t pid_vnr(struct pid *pid)	//获取局部进程号

8,
废弃：
sleep_on_timeout is deprecated
新的：
prepare_to_wait(q, &wait, TASK_INTERRUPTIBLE);
schedule_timeout - sleep until timeout

9,
头文件可以包含头文件，参考linux/completion.h:
---------------------------------------------------
#ifndef __LINUX_COMPLETION_H
#define __LINUX_COMPLETION_H

/*
 * (C) Copyright 2001 Linus Torvalds
 *
 * Atomic wait-for-completion handler data structures.
 * See kernel/sched/completion.c for details.
 */

#include <linux/wait.h>				<-------包含.h文件,这completion.h是一个完整的接口
struct completion {
	unsigned int done;
	wait_queue_head_t wait;			<----在wait.h中定义
};.
.
.
----------------------------------------------------

10.用内核API初始化链表节点
INIT_LIST_HEAD(&data.entry); 
-----------------------------------
wait_queue_entry_t data;
        
task = kthread_run(my_function,NULL,"XXX");
kpid = get_task_pid(task,PIDTYPE_PID);
pidt = pid_vnr(kpid);

init_waitqueue_head(&head);
//data.entry.next = &data.entry;   //手工初始化链表节点，不推荐！
INIT_LIST_HEAD(&data.entry);       //<-------sfw**用内核API初始化链表节点，推荐！
init_waitqueue_entry(&data,task);
prepare_to_wait(&head,&data,130);	//sfw** 初始化为empty后才能成功加入队列
------------------------------------

11.查找内核符号
cat /proc/kallsyms | grep xxx


12.内存池技术

struct page *alloc_pages(gfp_t gfp_mask, unsigned int order)    //原型
  void *mempool_alloc_pages(gfp_t gfp_mask, void *pool_data)	//封装	

void *kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)  //原型
void *mempool_alloc_slab(gfp_t gfp_mask, void *pool_data)	//封装

void *kmalloc(size_t size, gfp_t flags)				//原型
void *mempool_kmalloc(gfp_t gfp_mask, void *pool_data)		//封装

mempool_t *mempool_create(int min_nr, mempool_alloc_t *alloc_fn,mempool_free_t *free_fn, void *pool_data)
min_nr:   创建元素个数
alloc_fn: 后台分配函数
free_fn:  后台释放函数
pool_data:传给后台函数的参数，如：cache，size。















命令：
make
sudo insmod __module_address.ko 
sudo rmmod __module_address.ko
sudo dmesg -c
make && sudo insmod __module_address.ko && sudo rmmod __module_address.ko && sudo dmesg -c

modinfo xxx.ko
sudo insmod xxx.ko && sudo dmesg -c
sudo rmmod xxx.ko && sudo dmesg -c

grep -r KERN_SOH /usr/src/linux-headers-4.15.0-22

cat /proc/kallsyms | grep test_module


